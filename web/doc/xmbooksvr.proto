enum XMBookKVFieldArticle
{
	kXMBookKVFieldArticleSeq = 1;
	kXMBookKVFieldArticleCreateTime = 2;
	kXMBookKVFieldArticleURL = 3;
	kXMBookKVFieldArticleSubject = 4;
	kXMBookKVFieldArticleSummary = 5;
	kXMBookKVFieldArticleLogo = 6;
	kXMBookKVFieldArticleFlag = 7;
	kXMBookKVFieldArticleWXCates = 8;
	kXMBookKVFieldArticleWXTags = 9;
	kXMBookKVFieldArticleXMCates = 10;
	kXMBookKVFieldArticleXMTags = 11;
	kXMBookKVFieldArticleXMVec = 12;
	kXMBookKVFieldArticleXMAuthor = 13;
	kXMBookKVFieldArticleXMScore = 14;
	kXMBookKVFieldArticleReaduinCount = 15;
	kXMBookKVFieldArticleThumbsupuinCount = 16;
	kXMBookKVFieldArticleFavoriteduinCount = 17;
	kXMBookKVFieldArticlePublishTime = 18;
	kXMBookKVFieldArticleTagTime = 19;
	kXMBookKVFieldArticleDocID = 20;
}

enum XMBookArticleFlag
{
	kXMBookArticleFlagIsUrl = 0x01;				// url字段是ssID
	kXMBookArticleFlagIsNoPush = 0x04;			// 文章不需要推送
	kXMBookArticleFlagIsCommArticle = 0x08;		// 文章是全员推送文章
	kXMBookArticleFlagIsBannerArticle	= 0x10;		// 文章是主推文章
	kXMBookArticleFlagIsRecommend = 0x20;		// 文章是推荐文章
	kXMBookArticleFlagIsSelected = 0x40;		// 文章已经被选了（被用了）
	kXMBookArticleFlagIsOffShelved = 0x80;		// 文章被下架了（淘汰）
}

message XMBookTagsLevelData
{
	optional uint32 level = 1;      // 文章属于第level级标签
	repeated uint32 tagids = 2;     // 文章囊括的标签名
}

message XMBookTagsData    // 文章的标签信息
{
	repeated XMBookTagsLevelData leveldatas = 1;
}

message XMBookArticle
{
	optional uint32 id = 1;					//  文章唯一的ID
	optional uint64 createtime = 2;			//  文章入库时间
	optional uint32 topicid = 3;			//  文章所属话题ID
	optional bytes url = 4;					//  文章内容索引字段
	optional bytes subject = 5;				//  文章主题
	optional bytes summary = 6;				//  文章摘要
	optional bytes logo = 7;				//  文章图标url
	optional uint32 flag = 8;				//  文章标志位，定义在XMBookArticleFlag
	optional bytes wxcates = 9;				//  文章在微信侧的分类
	optional bytes wxtags = 10;				//  文章在微信侧的标签
	optional bytes xmcates = 11;			//  文章在微信侧的分类（通过','分割）
	optional XMBookTagsData xmtags = 12;	//  文章在邮箱侧的标签（通过','分割）
	optional bytes xmvec = 13;				//  文章内容向量
	optional bytes xmauthor = 14;			//  文章的作者/所属栏目等信息
	optional uint32 xmscore = 15;			//  文章的评分信息
	optional uint32 readuincount = 16;		//  阅读此文章的唯一用户数
	optional uint32 thumbsupuincount = 17;	//  点赞此文章的唯一用户数
	optional uint32 favoriteduincount = 18;	//  收藏此文章的唯一用户数
	optional uint64 publishtime = 19;		//  文章发行时间
	optional uint64 tagtime = 20;			//	第一次加标签的时间，去掉所有的标签就重置为0
	optional uint64 docid = 21;				//	公众号那边的文章唯一ID
}

message XMBookFocusTopicIDList
{
	repeated uint64 topic_ctimes = 1;
	repeated uint32 topic_ids = 2;
}

message XMBookUser
{
	optional uint64 createtime = 1;		//  用户创建时间
	optional uint64 uin = 2;			//  用户uin
	optional XMBookFocusTopicIDList focus_topicids = 3;	//  用户主动关注的话题信息
	optional bytes ttids = 4;			//  用户行为训练关注的话题信息
	optional bytes xmvec = 5;			//  用户行为训练关注向量
	optional uint64 lpushtime = 6;		//  上一次推送时间
}

enum XMBookArticleUserFlag
{
	kXMBookArticleUserFlagIsRead = 0x01;			//  文章标已读
	kXMBookArticleUserFlagIsDeleted = 0x02;			//  文章标已删除
	kXMBookArticleUserFlagIsShared = 0x04;			//  文章标已分享
	kXMBookArticleUserFlagIsPushed = 0x08;			//  文章标已推送
	kXMBookArticleUserFlagIsFavorited = 0x10;		//  文章标已收藏
	kXMBookArticleUserFlagIsThumbsUp = 0x20;		//  文章标已点赞
	kXMBookArticleUserFlagIsFocusTopic = 0x40;		//	用户主动关注的文章
}

enum XMBookKVFieldArticleUser
{
	kXMBookKVFieldArticleUserSeq = 1;
	kXMBookKVFieldArticleUserCreatetime = 2;
	kXMBookKVFieldArticleUserModifytime = 3;
	kXMBookKVFieldArticleUserArticleId = 4;
	kXMBookKVFieldArticleUserFlag = 5;
	kXMBookKVFieldArticleUserTopicId = 6;
	kXMBookKVFieldArticleUserPushTime = 7;
	kXMBookKVFieldArticleUserFavoTime = 8;
}

message XMBookArticleUser
{
	optional uint32 id = 1;				//  唯一的记录ID
	optional uint64 createtime = 2;		//  记录创建时间
	optional uint64 modifytime = 3;		//  记录更新时间
	optional uint64 uin = 4;			//  用户uin
	optional uint32 articleid = 5;		//  文章的ID
	optional uint32 flag = 6;			//  文章的行为标记，定义在XMBookArticleUserFlag
	optional uint64 topicid = 7;		//  文章所属的话题ID
	optional uint64 pushtime = 8;   	//  文章推送时间
	optional uint64 favotime = 9;		//  文章收藏时间
}

enum XMBookTopicSourceType
{
	kXMBookTopicSourceTypeWeMedia = 1;			//  来源于自媒体/公众号
	kXMBookTopicSourceTypeMagazine = 2;			//  来源于杂志
}

enum XMBookTopicFlag
{
	kXMBookTopicFlagIsWhite = 0x01;     //  主推话题
}

enum XMBookKVFieldTopic
{
	kXMBookKVFieldTopicSeq = 1;
	kXMBookKVFieldTopicCreateTime = 2;
	kXMBookKVFieldTopicName = 3;
	kXMBookKVFieldTopicSourceID = 4;
	kXMBookKVFieldTopicSourceName = 5;
	kXMBookKVFieldTopicSourceType = 6;
	kXMBookKVFieldTopicFlag = 7;
	kXMBookKVFieldTopicIntroduction = 8;
	kXMBookKVFieldTopicRecommendLogo = 9;
	kXMBookKVFieldTopicLastTagTime = 10;
	kXMBookKVFieldTopicLastInsertTime = 11;
	kXMBookKVFieldTopicArticleCount = 12;
}

message XMBookTopicRecommendLogo
{
	optional uint64 datetime = 1;
	optional bytes url = 2;
}

message XMBookTopicRecommendLogos
{
	repeated XMBookTopicRecommendLogo logos = 1;
}

message XMBookTopic
{
	optional uint32 id = 1;									//  话题唯一ID
	optional uint64 createtime = 2;							//  话题创建时间
	optional bytes name = 3;								//  XXXX
	optional uint32 sourceid = 4;							//  话题来源id（公众号为bizuinﻘX[B
	optional bytes sourcename = 5;							//  话题来源名称
	optional uint32	sourcetype = 6;							//  话题来源，定义在XMBookTopicSourceType
	optional uint32 flag = 7;								//  话题标志位BookTopicFlag
	optional bytes introduction = 8;						//  话题简介
	optional XMBookTopicRecommendLogos recommendlogos = 9;	//  话题logo信息
	optional uint64 lasttagtime = 10;						//  文章的最后一次打标签时间
	optional uint64 lastinserttime = 11;					//  最后插入文章的时间
	optional uint32 articlecount = 12;						//	文章数量（不含下架的）
}

enum XMBookKVFieldDateArticle
{
	kXMBookKVFieldDateArticleSeq = 1;
	kXMBookKVFieldDateArticleCreateTime = 2;
	kXMBookKVFieldDateArticleTopicID = 3;
	kXMBookKVFieldDateArticleArticleID = 4;
	kXMBookKVFieldDateArticleURL = 5;
	kXMBookKVFieldDateArticleSubject = 6;
	kXMBookKVFieldDateArticleSummary = 7;
	kXMBookKVFieldDateArticleLogo = 8;
	kXMBookKVFieldDateArticleAFlag = 9;
	kXMBookKVFieldDateArticleXMCates = 10;
	kXMBookKVFieldDateArticleXMTags = 11;
	kXMBookKVFieldDateArticleAuthor = 12;
	kXMBookKVFieldDateArticleXMScore = 13;
	kXMBookKVFieldDateArticlePublishTime = 14;
}

message XMBookDateArticle
{
	optional uint32 id = 1;					//  记录的唯一ID
	optional uint32 createtime = 2;			//  文章创建时间
	optional uint32 topicid = 3;			//  文章所属的话题ID
	optional uint32 articleid = 4; 			//  文章ID
	optional bytes url = 5;					//  文章内容索引信息
	optional bytes subject = 6;				//  文章主题
	optional bytes summary = 7;				//  文章摘要
	optional bytes logo = 8;				//  文章图片url
	optional uint32 aflag = 9;				//  文章标志位，定义在XMBookArticleFlag
	optional bytes xmcates = 10;			//  文章在xmail侧的分类（','分割）
	optional XMBookTagsData xmtags = 11;				//  文章在xmail侧的标签（','分割）
	optional bytes xmauthor = 12;			//  文章的作者/专栏等信息
	optional uint32 xmscore = 13;			//  文章的评分
	optional uint64 publishtime = 14;		//  文章的发行时间
}

enum XMBookKVFieldTagInfo
{
	kXMBookKVFieldTagInfoSeq = 1;
	kXMBookKVFieldTagInfoCreateTime = 2;
	kXMBookKVFieldTagInfoName = 3;
	kXMBookKVFieldTagInfoFatherID = 4;
	kXMBookKVFieldTagInfoLevel = 5;
}

message XMBookTagInfo
{
	optional uint32 id = 1;               // tag/cates的唯一id（一级的tags就是cates）
	optional uint64 createtime = 2;       // tag/cates创建时间
	optional bytes name = 3;              // tag/cates名称
	optional uint32 fid = 4;              // 二级tags的父节点
	optional uint32 level = 5;            // tags的级别
}

enum XMBookKVFieldDateRecommendArticle
{
	kXMBookKVFieldDateRecommendArticleSeq = 1;
	kXMBookKVFieldDateRecommendArticleCreateTime = 2;
	kXMBookKVFieldDateRecommendArticleTopicID = 3;
	kXMBookKVFieldDateRecommendArticleArticleID = 4;
	kXMBookKVFieldDateRecommendArticleClusterID = 5;
}

message XMBookDateRecommendArticle
{
	optional uint32 id = 1;               // 记录的唯一ID
	optional uint64 createtime = 2;       // 创建时间
	optional uint32 topicid = 3;          // 文章所属的话题ID
	optional uint32 articleid = 4;        // 文章ID
	optional uint32 clusterid = 5;        // 文章所属的卡片ID
}

enum XMBookClusterInfoFlag
{
	eXMBookClusterInfoFlagIsRuning			= 0x01; // 运营中
	eXMBookClusterInfoFlagIsOffShelved		= 0x02; // 下线了
	eXMBookClusterInfoFlagIsRecommendMon	= 0x04; // 周一推荐
	eXMBookClusterInfoFlagIsRecommendTUE	= 0x08; // 周二推荐
	eXMBookClusterInfoFlagIsRecommendWED	= 0x10; // 周三推荐
	eXMBookClusterInfoFlagIsRecommendTHU	= 0x20; // 周四推荐
	eXMBookClusterInfoFlagIsRecommendFRI	= 0x40; // 周五推荐
	eXMBookClusterInfoFlagIsNoEdit			= 0x80; // 不允许编辑的推荐卡片
	eXMBookClusterInfoFlagIsKYKRecommend	= 0x100; // 看一看推荐卡片
}

message XMBookClusterInfo
{
	optional uint32 id = 1;      // 卡片ID
	optional bytes name = 2;     // 卡片名称
	optional uint32 articlenum = 3; // 文章数量
	optional XMBookTagsData tags = 4;   // 聚合标签信息
	optional uint32 flag = 5;		// 状态标记
	optional int32 sortid = 6;		// 排序id
	optional bytes subname = 7;     // 副标题
	optional bytes logo = 8;		// 周推荐logourl
}

message XMBookClusterInfoList
{
	repeated XMBookClusterInfo infos = 1;
}

enum XMBookBWInfoCondFieldID							// 匹配字段定义
{
	kXMBookBWInfoCondFieldIDSubject 	= 1;			//	主题字段
}

enum XMBookBWInfoCondFieldIDVT							// 匹配值的类型
{
	kXMBookBWInfoCondFieldIDVTString	=	1;			//	值的类型为字符串
	kXMBookBWInfoCondFieldIDVTNumber	=	2;			//	值的类型为数值
}

enum XMBookBWInfoCondFuncID								// 匹配函数定义
{
	kXMBookBWInfoCondSubstr				= 1;			//	子串比较
}

message XMBookBWInfoCond								// 匹配条件定义
{
	optional uint32 fieldid = 1;						// 匹配字段名称
	optional int32 fieldval_intmin = 2;					// 匹配数值最小
	optional int32 fieldval_intmax = 3;					// 匹配数值最大
	optional bytes fieldval_str = 4;					// 匹配字符串
	optional uint32 funcid = 5;							// 匹配方法
}

enum XMBookBWInfoFlag								// 结果定义
{
	kXMBookBWInfoFlagIsBlack		= 0x01;			// 黑名单
	kXMBookBWInfoFlagIsWhite		= 0x02;			// 白名单
}

message XMBookBWInfo								// 黑白过滤条件
{
	optional uint32 bwid = 1;						// 唯一id
	optional uint32 flag = 2;						// 标志位
	optional XMBookTagsData autotags = 3;			// 标签集合
	repeated XMBookBWInfoCond condtions = 4;		// 匹配条件集合
}

message XMBookBWTopicInfo					// 话题的所有黑白条件集合
{
	optional uint32 topicid = 1;			// 话题id
	repeated XMBookBWInfo wblist = 2;		// 黑白条件集合
}

message XMBookBWInfoId2Name					// id和名字的映射关系
{
	optional uint32 id = 1;					// 唯一标识
	optional bytes name = 2;				// 中文名
	optional uint32 vt = 3;					// 值类型
}

message XMBookBWInfoList					// 黑白名单条件集合
{
	repeated XMBookBWInfoId2Name fieldid2name = 1;		// 匹配字段id和名字映射
	repeated XMBookBWInfoId2Name funcid2name = 2;		// 匹配方法id和名字映射
	repeated XMBookBWTopicInfo bwinfos = 3;				// 条件集合
}


message AddTagInfoReq     // 新增一个标签，如果是二级标签，需要指定fid
{
	optional bytes name = 1;    // 标签名称
	optional uint32 level = 2;  // 标记级别
	optional uint32 fid = 3;    // 二级标签的父节点
}

message AddTagInfoRsp
{
	optional int32 result = 1;
	optional uint32 seq = 2;    //  新增标签的id
}

message UpdateTagInfoReq    // 更新标签名
{
	optional uint32 id = 1;
	optional bytes newname = 2;
}

message UpdateTagInfoRsp
{
	optional int32 result = 1;
}

message DeleteTagInfoReq
{
	optional uint32 id = 1;     // 删除一个标签
}

message DeleteTagInfoRsp
{
	optional int32 result = 1;
}

enum GetTagInfoReqFlag
{
	kGetTagInfoReqFlagSelf = 0x01;     //  拉取指定标签自身信息
	kGetTagInfoReqFlagChild = 0x02;    //  拉取标签的子节点
	kGetTagInfoReqFlagFather = 0x04;   //  拉取标签的父节点 （二级标签才有）
}

message GetTagInfoReq          // 拉取标签信息
{
	optional uint32 id = 1;      // 根据id来拉取
	optional bytes name = 2;     // 根据名字来拉取
	optional uint32 level = 3;   // 根据拉取标签等级
	optional uint32 fid = 4;     // 根据fid拉取
	optional uint32 flag = 5;    // 根据拉取类型定义见GetTagInfoReqFlag
}

message GetTagInfoRsp
{
	repeated XMBookTagInfo taglist = 1;
}

message FullDateRecommendArticleData
{
	optional XMBookArticle bannerarticle = 1;                       // banner文章详情
	repeated XMBookArticle recommendarticles = 2;                   // 首页推荐文章详情
	repeated XMBookTopic recommendtopics = 3;                       // 首页推荐文章+banner文章话题信息
	repeated XMBookClusterInfo clusterinfos = 4;                    // 当前推荐卡片信息
	repeated XMBookDateRecommendArticle daterecommendarticles = 5;  // 首页推荐文章与推荐卡片的关联信息
	optional uint64 recommendtime = 6;								// 推荐时间
	optional bytes kyksearchid = 7;									// 看一看推荐的searchid（上报用到）
	optional uint32 kykoffset = 8;									// 看一看推荐的offset（上报用到）
}

message KYKDateRecommendArticleData
{
	repeated XMBookArticle recommendarticles = 1;
	repeated XMBookTopic recommendtopics = 2;
	repeated XMBookClusterInfo clusterinfos = 3;
	repeated XMBookDateRecommendArticle daterecommendarticles = 4;
	optional uint64 recommendtime = 5;
	optional bytes searchid = 6;
	optional uint32 offset = 7;
}

message AddDateRecommendArticleReq  // 新增被推荐的文章
{
	optional uint64 datetime = 1;   // 时间（定位表名）（必须）
	optional FullDateRecommendArticleData articles = 2;    // 推荐文章信息列表
}

message AddDateRecommendArticleRsp
{
	optional int32 result = 1;
}

message DeleteDateRecommendArticleReq     // 删除某个被推荐文章
{
	optional uint64 datetime = 1;         // 时间（定位表名）（必须）
	optional uint32 topicid = 3;          // 文章所属的话题ID
	optional uint32 articleid = 4;        // 文章ID
	optional uint32 clusterid = 5;        // 文章所属的卡片ID
}

message DeleteDateRecommendArticleRsp
{
	optional int32 result = 1;
}

message ClientInfo
{
	optional bytes net_type = 1; // wifi, 4g, 3g, 2g
	optional bytes client_ip = 2; // 客户端ip
	optional uint32 device = 3; // 1 android, 2 ios
}

message GetDateRecommendArticleReq        // 拉取某天的推荐文章
{
	optional uint64 datetime = 1;         // 上一次同步时间（定位表名）（必须）
	optional uint64 uin = 2;			// 当前触发拉取行为的uin
	optional bool isgetlast = 3 [default = true]; // 是否拉取最新的
	optional ClientInfo cilentinfo = 4;    // 客户端信息
}

message GetDateRecommendArticleRsp
{
	optional FullDateRecommendArticleData data = 1;
}

message AddClusterInfoReq      // 新增一个卡片
{
	optional XMBookClusterInfo clusterinfo = 1;    //  卡片信息
}

message AddClusterInfoRsp
{
	optional uint32 result = 1;
}

message DeleteClusterInfoReq     //  删除卡片信息 （参数至少有一个）
{
	optional uint32 id = 1;  // 根据卡片ID来删除 (可选)
	optional bytes name = 2; // 根据卡片名称来删除 (可选)
}

message DeleteClusterInfoRsp
{
	optional int32 result = 1;
}

message GetClusterInfoReq     // 拉取卡片信息
{
	optional uint32 id = 1;       // 根据卡片ID来拿取 (可选)
	optional bytes name = 2;      // 根据卡片名称来拿取 (可选)
}

message GetClusterInfoRsp
{
	optional XMBookClusterInfoList clusterinfos = 1;    // 标签信息列表
}

message UpdateClusterInfoReq     // 更新卡片信息
{
	optional XMBookClusterInfo clusterinfo = 1;
}

message UpdateClusterInfoRsp
{
	optional int32 result = 1;
}

message AddArticleReq    //  新增一篇文章
{
	optional XMBookArticle article = 1;
}

message AddArticleRsp
{
	optional int32 result = 1;
	optional uint32 seq = 2;   //  文章在话题ID下的唯一ID
}

message UpdateArticleReq     //  更新一篇文章
{
	optional uint32 topicid = 1;			//  话题ID（必选）
	optional uint32 articleid = 2;			//  文章ID（必选）
	optional bytes xmcates = 3;				//  更新文章的分类信息
	optional XMBookTagsData xmtags = 4;		//  更新文章的标签信息
	optional bytes xmvec = 5;				//  更新文章的内容向量
	optional bytes xmauthor = 6;			//  更新文章作者/栏目
	optional uint32 xmscore = 7;			//  更新文章分值
	optional uint32 readuincount = 8;		//  追加文章阅读用户数
	optional int32 thumbsupuincount = 9;	//  追加文章点赞用户数
	optional int32 favoriteduincount = 10;	//  追加文章收藏用户数
	optional uint32 appendflag = 11;		//  打上标志位
	optional uint32 removeflag = 12;		//	去除标志位
	optional bytes summary = 13;			//	更新摘要
	optional bytes logo = 14;				//	更新logo
}

message UpdateArticleRsp
{
	optional int32 result = 1;
}

message DeleteArticleReq   //  删除一篇文章
{
	optional uint32 topicid = 1;			//  话舄（必选）
	optional uint32 articleid = 2;			//  文章ID（必选）
}

message DeleteArticleRsp
{
	optional int32 result = 1;
}

message GetArticleReq    // 指定条件搜
{
	optional uint64 filtertime = 1;			//  某个时间分界
	optional uint32 topicid = 2;			//  指定话题ID的（必选）
	optional uint32 hasflag = 3;			//  包含指定某些标志位的（与的关系）
	optional uint32 noflag = 4;				//  不包含某些标志位的（或的关系）
	optional uint32 articleid = 5;			//  指定文章ID的
	optional bytes url = 6;					//  指定内容url的
	optional uint64 publishtime = 7;		//  指定发行
	optional uint32 limit = 8;				//	只拿指定量的文章
	optional bool filterup = 10 [default = false];	// filtertime > createtime ?
	optional uint64 docid = 11;				//  通过docid来检索
	optional uint64 uin = 12;				//	uin
}

message GetArticleRsp
{
	repeated XMBookArticle articles = 1;
}

message AddArticleUserReq    // 关联一个文章到某个用户下
{
	optional uint64 uin = 1;			//  用户uin（必选）
	optional uint32 topicid = 2;		//  话题ID（必选）
	optional uint32 articleid = 3;		//  文章ID（必选）
	optional uint32 flag = 4;			//  文章行为标记的
}

message AddArticleUserRsp
{
	optional int32 result = 1;
	optional uint32 seq = 2;
}

message UpdateArticleUserReq   // 更新某个用户的某篇文章标记
{
	optional uint64 uin = 1;				//  用户uin（必选）
	optional uint32 topicid = 2;			//  文章所属话题ID（必选）
	optional uint32 articleid = 3;			//  文章ID（必选）
	optional uint32 andflag = 4;			//  去除的flag
	optional uint32 orflag = 5;				//  追加的flag
}

message UpdateArticleUserRsp
{
	optional int32 result = 1;
}

message DeleteArticleUserReq    // 解除用户和文章的关联
{
	optional uint64 uin = 1;			//  用户uin（必选）
	optional uint32 topicid = 2;		//  文章所属话题ID（必选）
	optional uint32 articleid = 3;		//  文章ID（必选）
}

message DeleteArticleUserRsp
{
	optional int32 result = 1;
}

message GetArticleUserReq      // 获取某个用户关联的所有文章
{
	optional uint64 uin = 1;					//  用户uin  （必选）
	optional uint64 filtertime = 2;				//  指定某个时间之后
	optional uint32 hasflag = 3;				//  指定行为状态包含的标记
	optional uint32 noflag = 4;                //  指定行为状态不包含的标记
	optional uint32 topicid = 5;				//  指定话题ID
	optional uint32 articleid = 6;				//  指定文章ID
}

message GetArticleUserRsp
{
	repeated XMBookArticleUser articleusers = 1;	// 推荐文章和用户关联信息
	repeated XMBookArticle articles = 2;			// 推荐文章详情
	repeated XMBookTopic topics = 3;				// 推荐文章的话题信息
}

message AddUserReq     //  新增一名用户
{
	optional uint64 uin = 1;			//  用户uin  （必选）
	optional XMBookFocusTopicIDList focus_topicids = 2;	//  用户主动关注的话题信息
	optional bytes ttids = 3;			//  用户行为训练关注的话题信息
	optional bytes xmvec = 4;			//  用户行为训练关注向量
	optional uint64 lpushtime = 5;		//  用户最后一次推送时间
}

message AddUserRsp
{
	optional int32 result = 1;
}

message UpdateUserReq    //  更新用户信息
{
	optional uint64 uin = 1;			//  用户uin  （必选）
	optional XMBookFocusTopicIDList focus_topicids = 2;	//  更新用户主动关注信息
	optional bytes ttids = 3;			//  更新用户行为训练话题信息
	optional bytes xmvec = 4;			//  更新用户行为训练关注向量
	optional uint64 lpushtime = 5;		//  更新用户最后一次推送时间
	optional uint32 version = 6;		//  带版本号更新
}

message UpdateUserRsp
{
	optional int32 result = 1;
}

message DeleteUserReq    // 删除用户信息
{
	optional uint64 uin = 1;		//  用户uin  （必选）
}

message DeleteUserRsp
{
	optional int32 result = 1;
}

message GetUserReq     //  获取用户信息
{
	optional uint64 uin = 1;
}

message GetUserRsp
{
	optional XMBookUser user = 1;
	optional uint32 version = 2;    //版本号
}

message AddTopicReq     //  新增一个话题
{
	optional XMBookTopic topicinfo = 1;
}

message AddTopicRsp
{
	optional int32 result = 1;
	optional uint32 seq = 2;   //  话题ID
}

message DeleteTopicReq   // 删除一个话题
{
	optional bytes sourcename = 1;	//  指定话题名称的
	optional uint32 sourceid = 2;	//  指定来源ID的
	optional uint32 id = 3;			//  指定话题ID的
}

message DeleteTopicRsp
{
	optional int32 result = 1;
}

message GetTopicReq   //  获取话题列表
{
	optional uint32 id = 1;					//  指定好话题ID
	optional bytes sourcename = 2;			//  指定好话题名称
	optional uint32 sourceid = 3;			//  指定话题来源ID
	optional uint32 sourcetype = 4;			//  指定话题类型
	optional uint32 flag = 5;				//  指定话题标记
	optional uint64 filtertagtime = 6;		//  某个tagtime之后的
	optional uint64 filterinserttime = 7;	//  某个insertime之后的
}

message GetTopicRsp
{
	repeated XMBookTopic topics = 1;
}

message UpdateTopicReq   //  更新话题信息
{
	optional uint32 id = 1;							//  指定话
	optional uint32 sourceid = 2;					//  指定来源ID
	optional bytes sourcename = 3;					//  更新来源名称
	optional bytes introduction = 4;				//  更新来源简介
	optional XMBookTopicRecommendLogo logo = 5;		//  更新来源logo
	optional uint64 lasttagtime = 6;				//	文章最后一次打tag的时间
	optional uint64 lastinserttime = 7;				//  最后一次插入文章的时间
	optional uint32 articlecount = 8;				//	文章数量
}

message UpdateTopicRsp
{
	optional int32 result = 1;
}

message GetDateArticleReq     //  获取指定某天的文章列表
{
	optional uint64 datetime = 1;				//  某天的00:00:00的unixtime
	optional uint32 hasflag = 2;				//  指定文章标记有flag
	optional uint32 noflag = 3;					//	指定文章未标记flag
	optional uint32 topicid = 4;				//  指定文章所属的话题ID
	optional uint32 articleid = 5;				//  指定文章ID
}

message GetDateArticleRsp
{
	repeated XMBookDateArticle articles = 1;
}

message AddDateArticleReq    //  新增一篇文章到某天
{
	optional uint64 datetime = 1;		//  某天0:00:00的unixtime   （必选）
	optional uint32 topicid = 3;        //  文章所属的话题ID（必选）
	optional uint32 articleid = 4;		//  文章ID（必选）
}

message AddDateArticleRsp
{
	optional int32 result = 1;
	optional uint32 seq = 2;
}

message DeleteDateArticleReq    //  删除某天的某篇文章
{
	optional uint64 datetime = 1;			//  某天00:00:00的unixtime   （必选）
	optional uint32 topicid = 3;			//  文章所属的话题ID（必选）
	optional uint32 articleid = 4;			//  文章ID（必选）
}

message DeleteDateArticleRsp
{
	optional int32 result = 1;
}

message UpdateDateArticleReq		//  更新某天的某篇文章信息
{
	optional uint64 datetime = 1;		//  某天00:00:00的uniextime   （必选）
	optional uint32 topicid = 2;		//  文章所属的话题ID（必选）
	optional uint32 articleid = 3;		//  文章ID（必选）
	optional bytes xmcates = 4;			//  更新分类信息
	optional XMBookTagsData xmtags = 5;			//  更新标签信息
	optional bytes xmvec = 6;			//  更新向量信息
	optional bytes xmauthor = 7;		//  更新文章作者信息
	optional uint32 xmscore = 8;		//  更新文章分值
	optional uint32 appendflag = 9;        //  打上标志位
	optional uint32 removeflag = 10;        //  去除标志位
	optional bytes summary = 11;		//	更新摘要
	optional bytes logo = 12;			//	更新logo
}

message UpdateDateArticleRsp
{
	optional int32 result = 1;
}

message CgiGetTagFatherInfo
{
	optional XMBookTagInfo father = 1;
	repeated XMBookTagInfo childlist = 2;
}

message CgiGetTagFatherListReq
{
	optional uint32 level = 1 [default = 1];
}

message CgiGetTagFatherListRsp
{
	repeated CgiGetTagFatherInfo fatherlist = 1;
}

message CgiUpdateTagInfoReq
{
	optional uint32 id = 1;
	optional bytes newtagname = 2;
	repeated bytes addchildnames = 3;
	repeated uint32 newchildlist = 4;
}

message CgiUpdateTagInfoRsp
{
	optional int32 result = 1;
}

message GetNotSelectedRecommendArticleReq
{
	optional uint64 startdatetime = 1;
	optional uint32 daycount = 2;
}

message GetNotSelectedRecommendArticleRsp
{
	repeated XMBookDateArticle articles = 1;
}

message AddFocusTopicReq      // 新增一批话题的关注
{
	required uint64 uin = 1;
	repeated uint32 topicids = 2;
}

message AddFocusTopicRsp
{
	optional XMBookUser userinfo = 1;    // 用户信息
	repeated XMBookTopic focustopics = 2; // 当前关注的topic信息
}

message RemoveFocusTopicReq     // 取消一批话题的关注
{
	required uint64 uin = 1;
	repeated uint32 topicids = 2;
}

message RemoveFocusTopicRsp
{
	optional XMBookUser userinfo = 1;    // 用户信息
	repeated XMBookTopic focustopics = 2; // 当前关注的topic信息
}

message CgiGetFocusArticleReq 	  // 获取用户关注话题的文章信息
{
	optional uint64 uin = 1;      // 用户账号
	optional uint64 filtertime = 2;    // 过滤时间（获取某个时间之后新增的）
	optional uint32 topicid = 3;   // 指定某个话题
}

message CgiGetFocusArticleData
{
	optional uint64 datebegintime = 1;     // 某天
	repeated XMBookArticle articles = 2;   // 某天的文章
}

message CgiGetFocusArticleRsp
{
	repeated CgiGetFocusArticleData datas = 1;    // 多天文章信息
	repeated XMBookTopic articletopics = 2;       // 文章信息对应的话题信息
}

message XMBooksvrKVDataArticle
{
	optional uint32 topic = 1;
	repeated XMBookArticle articlelist = 2;
}

message XMBooksvrKVDataDateArticle
{
	optional uint64 datetime = 1;
	repeated XMBookDateArticle articlelist = 2;
}

message XMBooksvrKVData
{
	repeated XMBookTagInfo taglist = 1;
	repeated XMBookTopic topiclist = 2;
	repeated XMBooksvrKVDataArticle articlelist = 3;
	repeated XMBooksvrKVDataDateArticle datearticlelist = 4;
	optional XMBookClusterInfoList cluster = 5;
}

message GetBWInfoListReq
{

}

message GetBWInfoListRsp
{
	optional XMBookBWInfoList list = 1;
}

message UpdateBWInfoReq
{
	optional XMBookBWTopicInfo bwinfo = 1;
}

message UpdateBWInfoRsp
{
	optional XMBookBWInfoList list = 1;
}

message DeleteBWInfoReq
{
	optional uint32 topicid = 1;
}

message DeleteBWInfoRsp
{
	optional uint32 result = 1;
}
